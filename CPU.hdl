// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // to A register
    Mux16( a=instruction, b=ALUOutput,sel = instruction[15],out= inARegister);

    //A register load
    Not(in=instruction[15], out=no15);
    And(a=instruction[5],b= instruction[15],out= cInstruction);
    Or(a= no15, b=cInstruction, out=ARegisterLoad);

    // A register
    ARegister(in= inARegister, load=ARegisterLoad,out=inPC,out=afterARegister,out[0..14]=addressM);

    //select between the A register and the M register
    Mux16( a= afterARegister, b= inM, sel= instruction[12], out= afterMux);

    //the ALU
    ALU(x=afterDRegister, y=afterMux, zx= instruction[11],nx=instruction[10], zy= instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6],zr= zrOut1,zr=zrOut2,ng= ngOut1,ng=ngOut2
        ,out=ALUOutput, out =inDRegister, out= outM);

    // check if is there a need to write to the M register
    And(a= instruction[15],b=instruction[3],out=writeM);

    //D register load
    And(a= instruction[15],b=instruction[4],out=DRegisterLoad);

    // D register
    DRegister(in= inDRegister, load=DRegisterLoad,out=afterDRegister);

    // checking if the ALU output is negative, positive and equal to zero
    And(a=ngOut1, b=instruction[2], out=isNeg);
    And(a=zrOut1,b=instruction[1] ,out=isZero);
    Not(in=zrOut2, out= notZrOutput);
    Not(in=ngOut2,out=positive);
    And(a=positive,b=notZrOutput,out=pos);
    And(a= pos, b=instruction[0],out=isPos);

    //checking the is a need to jump
    Or(a=isNeg,b=isZero,out=out1);
    Or(a=isPos, b=out1, out=out2,out=load1);
    And(a=load1, b=instruction[15],out=load2, out=load3);

    //determining the PC inc inputs
    Not(in=load2,out=notLoad2);
    And(a=true,b=notLoad2,out=inc1);

    // the program counter
    PC(in=inPC, inc=inc1, load=load2, reset=reset, out[0..14]=pc);

}