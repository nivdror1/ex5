/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:

     // SHIFTER

     Mux16( a = y, b = x, sel = instruction[4], out = toShift);
     ShiftLeft( in = toShift, out = shiftedLeft);
     ShiftRight( in = toShift, out = shiftedRight);
     Mux16( a = shiftedRight, b = shiftedLeft, sel = instruction[5], out = shifterOutput);

     // BASIC ALU

     ALU( x = x, y = y, zx = instruction[5], nx = instruction[4], zy = instruction[3], ny = instruction[2], f = instruction[1], no = instruction[0], out = basicAluOutput);

     // MULTIPLEXER

     Mul( a = x, b = y, out = mulOutput);


     // choosing the right output

     // shift vs basic ALU

     Mux16( a = shifterOutput, b = basicAluOutput, sel = instruction[8], out = shifterAluOutput);

     // shift-alu vs mul

     Mux16( a = mulOutput, b = shifterAluOutput, sel = instruction[7], out = tmpOutput);

     NegCheck( in = tmpOutput, out = ng);
     ZeroCheck(in = tmpOutput, out = zr);


     And16( a = tmpOutput, b = true, out = out);
        
}
